# coding=utf-8
import config
import telebot
import requests
import logging
import pandas as pd
import json
from telegram import ParseMode
import datetime
import time
import xlwt
import numpy as np
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from bs4 import BeautifulSoup as BS
import sqlite3
from sqlite3 import Error
from time import sleep, ctime
from json import JSONDecodeError
requestime = datetime.datetime.now()
bot = telebot.TeleBot(config.token)

flag = ''
dateflag = ''
dateresult = ''
today = datetime.datetime.today()

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup.row('–í–≤–µ—Å—Ç–∏ –∫–ª—é—á API üîë')
markup.row('–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚ÑπÔ∏è')

markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup2.row('–£–∑–Ω–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ üí∏')
markup2.row('–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É üìÖ')
markup2.row('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥ üì¶')
markup2.row('–í–≤–µ—Å—Ç–∏ –∫–ª—é—á API üîë')
markup2.row('–ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É üíµÔ∏è')
markup2.row('–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚ÑπÔ∏è')


#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ sqlite3
def post_sql_query(sql_query):
    with sqlite3.connect('my.db') as connection:
        cursor = connection.cursor()
        try:
            cursor.execute(sql_query)
        except Error:
            pass
        result = cursor.fetchall()
        return result

def create_tables():
    users_query = '''CREATE TABLE IF NOT EXISTS USERS 
                        (user_id INTEGER PRIMARY KEY NOT NULL,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        reg_date TEXT,
                        api_key TEXT);'''
    post_sql_query(users_query)

def register_user(user, username, first_name, last_name, api_key):
    user_check_query = f'SELECT * FROM USERS WHERE user_id = {user};'
    user_check_data = post_sql_query(user_check_query)
    if not user_check_data:
        insert_to_db_query = f'INSERT INTO USERS (user_id, username, first_name,  last_name, reg_date, api_key) VALUES ({user}, "{username}", "{first_name}", "{last_name}", "{ctime()}", "{api_key}");'
        post_sql_query(insert_to_db_query )
create_tables()

def take_key(user_id1):
    select = 'SELECT api_key FROM "USERS" where user_id=' + str(user_id1)
    con = sqlite3.connect('my.db')
    cur = con.cursor()
    cur.execute(select)
    user_key = cur.fetchone()
    user_key = user_key[0]
    con.close()
    return (user_key)

#–ß–∞—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def cal(c):
    global dateflag
    global dateresult
    result, key, step = DetailedTelegramCalendar().process(c.data)
    if not result and key:
        bot.edit_message_text(f"Select {LSTEP[step]}",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:
        bot.edit_message_text(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {result}",
                              c.message.chat.id,
                              c.message.message_id)
        dateresult = result
        dateflag = 1

@bot.message_handler(commands=['start', 'help'])
def main(message):
    global flag
    flag = 0
    bot.send_message(message.chat.id,"üôã‚Äç‚ôÇÔ∏è", reply_markup=markup)
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–¥–∞–∂–∞–º–∏ –Ω–∞ Wildberries.ru –∏ –ø–æ–º–æ–≥—É –∏—Ö —É–ª—É—á—à–∏—Ç—å\nüõ† –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—éüëá\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API –∏–Ω–æ–≥–¥–∞ –æ–ø–∞–∑–¥—ã–≤–∞—é—Ç –æ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
    bot.send_photo(message.chat.id, open('menu_icon.jpg', 'rb'))
    bot.send_message(message.chat.id,
                     "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É [–í–≤–µ—Å—Ç–∏ –∫–ª—é—á API üîë]")
    ## –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    data_analitics = {
        "api_key": "51ad1f80d51b48fb66cad0f36362b5f4",
        "events": {
            "user_id": str(message.chat.id),
            "event_type": "[Amplitude] Start Session"
        }

    }
    headers = {
        'Content-Type': 'application/json',
        'Accept': '*/*'
    }

    r = requests.post('https://api.amplitude.com/2/httpapi', data=json.dumps(data_analitics), headers=headers)
@bot.message_handler(content_types=['text'])
def process_date(m):
    if '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É üìÖ' == str(m.text):
            calendar, step = DetailedTelegramCalendar().build()
            bot.send_message(m.chat.id,
                             f"Select {LSTEP[step]}",
                             reply_markup=calendar)
    if '–í–≤–µ—Å—Ç–∏ –∫–ª—é—á API üîë' == str(m.text):
        bot.send_message(m.chat.id,
                         '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –∫–ª—é—á API Wildberries\n\n*–ö–∞–∫ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å API-–∫–ª—é—á?*\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è API-–∫–ª—é—á–∞, –∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –≤–∞—à API-–∫–ª—é—á –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è, —á—Ç–æ –æ–Ω –±—ã–ª —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ Service Desk –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"', parse_mode=ParseMode.MARKDOWN )
        global flag
        flag = 1
    if '–£–∑–Ω–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ üí∏' == str(m.text):
            global file
            global order_data
            global requestime
            global today
            global dateresult
            try:
                if 1 == dateflag:
                    datesales = dateresult
                else:
                    datesales = today.strftime("%Y-%m-%d")
                if (datetime.datetime.now() - requestime).seconds < 60:
                    msg1 = bot.send_sticker(m.chat.id, 'CAACAgIAAxkBAAJDvF-dcYBM4MHZHt6J2cf56YiITMCIAALcAAP3AsgPUNi8Bnu98HwbBA')
                    msg2 = bot.send_message(m.chat.id,
                                     '–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö‚è±')
                    time.sleep(60 - (datetime.datetime.now() - requestime).seconds)
                    bot.delete_message(m.chat.id, msg1.message_id)
                    bot.delete_message(m.chat.id, msg2.message_id)
                rSclad = requests.get(
                    "https://suppliers-stats.wildberries.ru/api/v1/supplier/stocks?dateFrom=2017-03-25T21%3A00%3A00.000Z&key=" + str(take_key(m.from_user.id)))
                filename2 = 'sclad.json'
                file = open(filename2, 'w')
                file.write(json.dumps(rSclad.text))
                file.close()
                file = open(filename2, 'r')
                sclad_data = json.loads(rSclad.text)
                # –°–±–æ—Ä–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞
                nmIdlistSclad = []
                nmIdquantitySclad = []
                nmIdtotalSclad = len(sclad_data)

                i = 0
                # –°–±–æ—Ä–∫–∞ –≤ 2 –º–∞—Å—Å–∏–≤–∞ –ê—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ —Å–∫–ª–∞–¥–∞
                while i < nmIdtotalSclad:
                    try:
                        q = nmIdlistSclad.index(sclad_data[i]["nmId"])
                        nmIdquantitySclad[q] += sclad_data[i]["quantity"]
                    except ValueError:
                        nmIdlistSclad.append(sclad_data[i]["nmId"])
                        nmIdquantitySclad.append(sclad_data[i]["quantity"])
                    i += 1

                r = requests.get(
                    "https://suppliers-stats.wildberries.ru/api/v1/supplier/orders?dateFrom=" + str(
                        datesales) + "T21%3A00%3A00.000Z&flag=1&key=" + str(take_key(m.from_user.id)))
                requestime = datetime.datetime.now()
                filename = 'orderstoday.json'
                file = open(filename, 'w')
                file.write(json.dumps(r.text))
                file.close()
                file = open(filename, 'r')
                order_data = json.loads(r.text)
                name = ''
                # –ß—Ç–µ–Ω–∏–µ –§–∞–π–ª–∞
                file = open(filename, 'r')
                order_data = json.loads(r.text)
                # –°–±–æ—Ä–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å–æ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
                nmIdlist = []
                nmIdquantity = []
                nmIdprice = []
                nmIdtotal = len(order_data)

                i = 0
                # –°–±–æ—Ä–∫–∞ –≤ 3 –º–∞—Å—Å–∏–≤–∞ –ê—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞ –∑–∞ –≤—ã—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
                while i < nmIdtotal:
                    if order_data[i]["nmId"] in nmIdlist:
                        artIndex = nmIdlist.index(order_data[i]["nmId"])
                        nmIdquantity[artIndex] += order_data[i]["quantity"]
                        nmIdprice[artIndex] += (
                                order_data[i]["totalPrice"] / 100 * (100 - int(order_data[i]["discountPercent"])))
                        i += 1
                    else:
                        nmIdlist.append(order_data[i]["nmId"])
                        nmIdquantity.append(order_data[i]["quantity"])
                        nmIdprice.append(
                            order_data[i]["totalPrice"] / 100 * (100 - int(order_data[i]["discountPercent"])))
                        i += 1

                clen = len(nmIdlist) - 1
                i = 0;
                while i <= clen:
                    try:
                        quantityScladStr = str(nmIdquantitySclad[nmIdlistSclad.index(nmIdlist[i])])
                    except ValueError:
                        quantityScladStr = '0'
                    zapros = requests.get(
                        "https://www.wildberries.ru/catalog/" + str(nmIdlist[i]) + "/detail.aspx?targetUrl=mp")
                    html = BS(zapros.content, 'html.parser')
                    name += '<b>' + html.find("span", {
                        'class': 'name'}).getText() + '</b>' + '<code>\n</code>' + '–∞—Ä—Ç–∏–∫—É–ª WB:' + '<a href="https://www.wildberries.ru/catalog/' + str(
                        nmIdlist[i]) + '/detail.aspx?targetUrl=MI"' + '>' + str(
                        nmIdlist[i]) + '</a>' + '<code>\n</code>' + '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:' + str(
                        nmIdquantity[i]) + '<code>\n</code>' + '—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:' + str(
                        nmIdprice[i] // nmIdquantity[
                            i]) + '‚ÇΩ' + '<code>\n</code>' + '–æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ:' + quantityScladStr + '<code>\n</code>' + '<code>\n</code>'
                    i += 1
                file.close()
                totalprice = round(np.sum(nmIdprice))
                totalquantity = np.sum(nmIdquantity)
                totalstring = '–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ:' + str(totalprice) + '‚ÇΩ' + '\n' + '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:' + str(
                    totalquantity) + ' —à—Ç' + '\n' + '–î–∞–Ω–Ω—ã–µ –Ω–∞ ' + str(datesales)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
                if len(name) > 4000:
                    try:
                        # —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                        my_file = open("long.txt", "w")
                        my_file.write(name)
                        my_file.close()

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –±–æ—Ç–æ–º
                        uis_long = open('long.txt', 'rb')
                        bot.send_document(m.chat.id, uis_long)
                        uis_long.close()
                    except ValueError:
                        bot.send_message(m.chat.id,
                                         "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã, Wildberries –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –Ω–∞–º –¥–µ–ª–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
                    except NameError:
                        bot.send_message(m.chat.id,
                                         'API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É [–í–≤–µ—Å—Ç–∏ –∫–ª—é—á API üîë]')
                    except Exception:
                        bot.send_message(m.chat.id,
                                         '–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API')
                else:
                    bot.send_message(m.chat.id, name, parse_mode=ParseMode.HTML)
                bot.send_message(m.chat.id, totalstring, parse_mode=ParseMode.HTML)
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                data_analitics = {
                    "api_key": "51ad1f80d51b48fb66cad0f36362b5f4",
                    "events": {
                        "user_id": str(m.chat.id),
                        "event_type": "[Amplitude] Revenue (Verified)"
                    }

                }
                headers = {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
                r = requests.post('https://api.amplitude.com/2/httpapi', data=json.dumps(data_analitics),
                                  headers=headers)
            except ValueError:
                bot.send_message(m.chat.id,
                                 "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã, Wildberries –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –Ω–∞–º –¥–µ–ª–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            except NameError:
                bot.send_message(m.chat.id,
                                 'API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É [–í–≤–µ—Å—Ç–∏ –∫–ª—é—á API üîë]')
            except Exception:
                bot.send_message(m.chat.id,
                                 '–ü—Ä–æ–¥–∞–∂ –ø–æ–∫–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API')
    if len(m.text) == 48:
            if 1 == flag:
                user_key = str(m.text)
                if (datetime.datetime.now() - requestime).seconds < 60:
                    msg1 = bot.send_sticker(m.chat.id,
                                            'CAACAgIAAxkBAAJDvF-dcYBM4MHZHt6J2cf56YiITMCIAALcAAP3AsgPUNi8Bnu98HwbBA')
                    msg2 = bot.send_message(m.chat.id,
                                            '–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö‚è±')
                    time.sleep(60 - (datetime.datetime.now() - requestime).seconds)
                    bot.delete_message(m.chat.id, msg1.message_id)
                    bot.delete_message(m.chat.id, msg2.message_id)
                r = requests.get(
                    "https://suppliers-stats.wildberries.ru/api/v1/supplier/orders?dateFrom=" + today.strftime(
                        "%Y-%m-%d") + "T21%3A00%3A00.000Z&flag=1&key=" + user_key)

                requestime = datetime.datetime.now()
                filename = 'orderstoday.json'
                file = open(filename, 'w')
                file.write(json.dumps(r.text))
                file.close()
                file = open(filename, 'r')
                order_data = json.loads(r.text)
                try:
                    if order_data["errors"] == ["can't decode supplier key"]:
                        bot.send_message(m.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API')
                except TypeError:
                    bot.send_message(m.chat.id, '–ö–ª—é—á API –ø—Ä–∏–Ω—è—Ç', reply_markup=markup2)
                    flag = 0;
                    register_user(m.from_user.id, m.from_user.username,
                                  m.from_user.first_name, m.from_user.last_name, user_key)

                file.close()
    if '–ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É üíµÔ∏è' == str(m.text):
        helpmessage = '–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à –±–æ—Ç –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href="https://capu.st/marketplaceorder_bot">–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å</a> <code>\n</code>–ù–∞–º –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!üòä<code>\n</code> –°–ø–∞—Å–∏–±–æ!'
        bot.send_message(m.chat.id,
                         helpmessage, parse_mode=ParseMode.HTML)
    if '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–ª–∞–¥ üì¶' == str(m.text):
        try:
            if (datetime.datetime.now() - requestime).seconds < 60:
                msg1 = bot.send_sticker(m.chat.id,
                                        'CAACAgIAAxkBAAJDvF-dcYBM4MHZHt6J2cf56YiITMCIAALcAAP3AsgPUNi8Bnu98HwbBA')
                msg2 = bot.send_message(m.chat.id,
                                        '–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö‚è±')
                time.sleep(60 - (datetime.datetime.now() - requestime).seconds)
                bot.delete_message(m.chat.id, msg1.message_id)
                bot.delete_message(m.chat.id, msg2.message_id)
            rSclad = requests.get(
                "https://suppliers-stats.wildberries.ru/api/v1/supplier/stocks?dateFrom=2017-03-25T21%3A00%3A00.000Z&key=" + str(take_key(m.from_user.id)))
            filename2 = 'sclad.json'
            file = open(filename2, 'w')
            file.write(json.dumps(rSclad.text))
            file.close()
            file = open(filename2, 'r')
            sclad_data = json.loads(rSclad.text)
            # –°–±–æ—Ä–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞
            nmIdlistSclad = []
            nmIdquantitySclad = []
            nmIdtotalSclad = len(sclad_data)

            i = 0
            # –°–±–æ—Ä–∫–∞ –≤ 2 –º–∞—Å—Å–∏–≤–∞ –ê—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ —Å–∫–ª–∞–¥–∞
            while i < nmIdtotalSclad:
                try:
                    q = nmIdlistSclad.index(sclad_data[i]["nmId"])
                    nmIdquantitySclad[q] += sclad_data[i]["quantity"]
                except ValueError:
                    nmIdlistSclad.append(sclad_data[i]["nmId"])
                    nmIdquantitySclad.append(sclad_data[i]["quantity"])
                i += 1
            # —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª excel
            i = 0
            result = pd.DataFrame()
            def sclad_table(i):
                global maxnamelen
                try:
                    zapros = requests.get(
                        "https://www.wildberries.ru/catalog/" + str(i) + "/detail.aspx?targetUrl=mp")
                    html = BS(zapros.content, 'html.parser')
                    name = html.find('span', class_= 'name').text
                except AttributeError:
                    name = '-'
                res = pd.DataFrame()
                res = res.append(pd.DataFrame([[i, name, nmIdquantitySclad[k]]],
                                                  columns=['Articul', 'Name', 'quantity']), ignore_index=True)
                return res

            k = 0
            for i in nmIdlistSclad:
                i = sclad_table(i)
                k += 1
                result = result.append(i, ignore_index=True)
            # Create a Pandas Excel writer using XlsxWriter as the engine.
            writer = pd.ExcelWriter("Sclad.xlsx", engine='xlsxwriter')
            # Convert the dataframe to an XlsxWriter Excel object.
            result.to_excel(writer, sheet_name='Sheet1')
            # Get the xlsxwriter workbook and worksheet objects.
            workbook = writer.book
            worksheet = writer.sheets['Sheet1']
            # Set the column width and format.
            worksheet.set_column('C:C', 100)
            cell_format = workbook.add_format()
            cell_format.set_pattern(1)  # This is optional when using a solid fill.
            cell_format.set_bg_color('red')
            # Close the Pandas Excel writer and output the Excel file.
            writer.save()
            #–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –±–æ—Ç–æ–º
            uis_excel = open('Sclad.xlsx', 'rb')
            bot.send_document(m.chat.id, uis_excel)
            uis_excel.close()
        except ValueError:
            bot.send_message(m.chat.id,
                             "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã, Wildberries –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –Ω–∞–º –¥–µ–ª–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
        except NameError:
            bot.send_message(m.chat.id,
                             'API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É [–í–≤–µ—Å—Ç–∏ –∫–ª—é—á API üîë]')
        except Exception:
            bot.send_message(m.chat.id,
                             '–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API')
    if '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚ÑπÔ∏è' == str(m.text):
        bot.send_message(m.chat.id,
                         '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —á—Ç–æ —Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –Ω–∞–ø–∏—à–∏—Ç–µ: @DmitryZhilin')
    #else:
     #   bot.send_message(m.chat.id,
     #                    '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —á—Ç–æ —Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –Ω–∞–ø–∏—à–∏—Ç–µ: @DmitryZhilin')





if __name__ == '__main__':
    bot.polling(none_stop=True, timeout=300)
